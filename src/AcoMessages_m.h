//
// Generated file, do not edit! Created by opp_msgtool 6.2 from AcoMessages.msg.
//

#ifndef __ACOMESSAGES_M_H
#define __ACOMESSAGES_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// opp_msgtool version check
#define MSGC_VERSION 0x0602
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of opp_msgtool: 'make clean' should help.
#endif

class DataMsg;
class AntMsg;
/**
 * Class generated from <tt>AcoMessages.msg:5</tt> by opp_msgtool.
 * <pre>
 * // Data packet sent between devices
 * packet DataMsg
 * {
 *     int srcAddress;
 *     int destAddress;
 *     int hopCount = 0;
 *     string payload;
 * }
 * </pre>
 */
class DataMsg : public ::omnetpp::cPacket
{
  protected:
    int srcAddress = 0;
    int destAddress = 0;
    int hopCount = 0;
    omnetpp::opp_string payload;

  private:
    void copy(const DataMsg& other);

  protected:
    bool operator==(const DataMsg&) = delete;

  public:
    DataMsg(const char *name=nullptr, short kind=0);
    DataMsg(const DataMsg& other);
    virtual ~DataMsg();
    DataMsg& operator=(const DataMsg& other);
    virtual DataMsg *dup() const override {return new DataMsg(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual int getSrcAddress() const;
    virtual void setSrcAddress(int srcAddress);

    virtual int getDestAddress() const;
    virtual void setDestAddress(int destAddress);

    virtual int getHopCount() const;
    virtual void setHopCount(int hopCount);

    virtual const char * getPayload() const;
    virtual void setPayload(const char * payload);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const DataMsg& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, DataMsg& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>AcoMessages.msg:13</tt> by opp_msgtool.
 * <pre>
 * // Ant packet for ACO algorithm
 * packet AntMsg
 * {
 *     int srcAddress;
 *     int destAddress;
 *     int currentNode;  // current position of ant
 *     int hopCount = 0;
 *     bool isForwardAnt = true;  // true for forward ant, false for backward ant
 *     int visitedNodes[];  // stores path traversed
 *     double pathCost = 0.0;  // accumulated cost along path
 *     int iteration;  // ACO iteration number
 * }
 * </pre>
 */
class AntMsg : public ::omnetpp::cPacket
{
  protected:
    int srcAddress = 0;
    int destAddress = 0;
    int currentNode = 0;
    int hopCount = 0;
    bool isForwardAnt_ = true;
    int *visitedNodes = nullptr;
    size_t visitedNodes_arraysize = 0;
    double pathCost = 0.0;
    int iteration = 0;

  private:
    void copy(const AntMsg& other);

  protected:
    bool operator==(const AntMsg&) = delete;

  public:
    AntMsg(const char *name=nullptr, short kind=0);
    AntMsg(const AntMsg& other);
    virtual ~AntMsg();
    AntMsg& operator=(const AntMsg& other);
    virtual AntMsg *dup() const override {return new AntMsg(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual int getSrcAddress() const;
    virtual void setSrcAddress(int srcAddress);

    virtual int getDestAddress() const;
    virtual void setDestAddress(int destAddress);

    virtual int getCurrentNode() const;
    virtual void setCurrentNode(int currentNode);

    virtual int getHopCount() const;
    virtual void setHopCount(int hopCount);

    virtual bool isForwardAnt() const;
    virtual void setIsForwardAnt(bool isForwardAnt);

    virtual void setVisitedNodesArraySize(size_t size);
    virtual size_t getVisitedNodesArraySize() const;
    virtual int getVisitedNodes(size_t k) const;
    virtual void setVisitedNodes(size_t k, int visitedNodes);
    virtual void insertVisitedNodes(size_t k, int visitedNodes);
    [[deprecated]] void insertVisitedNodes(int visitedNodes) {appendVisitedNodes(visitedNodes);}
    virtual void appendVisitedNodes(int visitedNodes);
    virtual void eraseVisitedNodes(size_t k);

    virtual double getPathCost() const;
    virtual void setPathCost(double pathCost);

    virtual int getIteration() const;
    virtual void setIteration(int iteration);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const AntMsg& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, AntMsg& obj) {obj.parsimUnpack(b);}


namespace omnetpp {

template<> inline DataMsg *fromAnyPtr(any_ptr ptr) { return check_and_cast<DataMsg*>(ptr.get<cObject>()); }
template<> inline AntMsg *fromAnyPtr(any_ptr ptr) { return check_and_cast<AntMsg*>(ptr.get<cObject>()); }

}  // namespace omnetpp

#endif // ifndef __ACOMESSAGES_M_H

